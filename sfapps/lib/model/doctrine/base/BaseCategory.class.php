<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Category', 'doctrine');

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $type
 * @property integer $parent_id
 * @property string $name
 * @property string $name_en
 * @property string $name_ru
 * @property integer $sort
 * @property Doctrine_Collection $Product
 * 
 * @method integer             getId()        Returns the current record's "id" value
 * @method string              getType()      Returns the current record's "type" value
 * @method integer             getParentId()  Returns the current record's "parent_id" value
 * @method string              getName()      Returns the current record's "name" value
 * @method string              getNameEn()    Returns the current record's "name_en" value
 * @method string              getNameRu()    Returns the current record's "name_ru" value
 * @method integer             getSort()      Returns the current record's "sort" value
 * @method Doctrine_Collection getProduct()   Returns the current record's "Product" collection
 * @method Category            setId()        Sets the current record's "id" value
 * @method Category            setType()      Sets the current record's "type" value
 * @method Category            setParentId()  Sets the current record's "parent_id" value
 * @method Category            setName()      Sets the current record's "name" value
 * @method Category            setNameEn()    Sets the current record's "name_en" value
 * @method Category            setNameRu()    Sets the current record's "name_ru" value
 * @method Category            setSort()      Sets the current record's "sort" value
 * @method Category            setProduct()   Sets the current record's "Product" collection
 * 
 * @package    vogue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('name_en', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('name_ru', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('sort', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Product', array(
             'local' => 'id',
             'foreign' => 'category_id'));
    }
}